<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<ebase version="5.3.2">
    <script contentType="Javascript" preferredComponentPath="/Forms/ENQUIRY" preferredComponentProject="CRM_Customer" id="CRM_INTEGRATION" dateCreated="2013-11-14T11:02:57.703Z">
        <scriptText>importPackage(com.ebasetech.xi.api);
importPackage(com.ebasetech.xi.services);

/*************************************************************************************************************************************
 * 
 * These functions provide a method of creating a CRM enquiry record by mapping fields using modifiers. 
 * 
 * The function checks for exisiting customer using their forename, surname and email address. If all three match then the enquiry
 * is created using the customer id found. If no match is found, a new customer is created and that customer ID used for the enquiry.
 * 
 * The function, if successfull will return the Enquiry ID
 * 
 * To create an enquiry call the main function insertCRMEnquiry
 * 
 * To create or get just the customer ID call the insertCRMCustomer function
 * 		
 * Modifier Mapping Details:-
 * 		
 * Table				Field										Modifier Name
 * 									
 * Enquiry 			Subject							-		crmSubject
 * Enquiry 			Details							-		crmDetails
 * 
 * Customer			Title								-		crmTitle
 * Customer			OtherTitle					-		crmOtherTitle
 * Customer			Forename						-		crmForename
 * Customer			Surname							-		crmSurname
 * Customer			Telephone						-		crmTelephone					(Optional)
 * Customer			Mobile							-		crmMobile							(Optional)
 * Customer			Email								-		crmEmail
 * Customer			Revs_Account_Ref		-		crmAccountRef					(Optional)
 * Customer			NI_No								-		crmNINo								(Optional)
 * Customer			DOB									-		crmDOB								(Optional)
 * 
 * Address			Address1						-		crmAddress1
 * Address			Address2						-		crmAddress2						(Optional)
 * Address			Address3						-		crmAddress3						(Optional)
 * Address			Town								-		crmTown
 * Address			County							-		crmCounty
 * Address			PostCode						-		crmPostCode
 * Address			UPRN								-		crmUPRN								(Optional)			(Residential Only)
 * Address			PropertyRef					-		crmPropertyRef				(Optional)			(Business Only)
 * Address			BusinessRef					-		crmBusinessRef				(Optional)			(Business Only)
 * Address			BusinessName				-		crmBusinessName				(Optional)			(Business Only)
 * Address			Start Date					-		crmStartDate					(optional)			
 * 
 * Created By: 	George Eadon
 * Date:				15/11/2013
 * 
 * ******* Change Log ********
 * 
 * 10/11/2016		GE		Updated the insert enquiry function
 * 
 *************************************************************************************************************************************/

var strCon = 'CRM';
var User = system.variables.$USER.value;


/*********************************************************************************************************************************/

/**
 * Returns URL for linking to an enquiry
 * @param {integer} EnquiryID
 * @return {string} 
 * @desc 	This function takes an Enquiry ID and returns a URL which can be used to link.
 * directly to the specified enquiry
*/

function crmGetEnquiryLink(EnquiryID) {

		var url = svrPath + "CLIC_ENQUIRY.eb?Enquiry_ID=" + EnquiryID;

	return url;
}

/*********************************************************************************************************************************/

/**
 * Checks the database version and the forms version match
 * @returns {object} 
*/

//function crmCheckDBVersion() {
	//Current forms version
	var version = {};
	version.forms = 1.83;
	version.database = 0.0;
	version.update = false;
	system.variables.$USERVAR2.value = 'v.' + version.forms;
	
	//Check the database version is correct
//	var con = system.getDatabaseConnection(strCon);
//	var stmt;
//	var rs;
//	
//	try {
//		stmt = con.prepareStatement("select system_version from sys_Settings");
//	
//		rs = stmt.executeQuery();
//	
//	  while (rs.next()){
//			version.database = rs.getDouble("system_version");
//		}	
//	}
//	catch (e) {
//		log("__**ERROR** - Error getting database version - " + e);
//	}
//	finally {
//	  if(rs) rs.close();
//	  if(stmt) stmt.close();
//	  if(con) con.close();	
//	}
//
//	if (version.forms &gt; version.database) {
//		//If the database is out of date then show error message.
//		var params = {};
//		params.Error_Title = "Database Out of Date";
//		params.Error_Message = "The database version (v" + version.database + ") does not match the current forms version (v" + version.forms + ").";
//		form.gotoForm('LoginError', params);
//	}
//	else {
//		system.variables.$USERVAR2.value = 'v.' + version.database;
//	}

	//return version;
//}


/*********************************************************************************************************************************/

/**
 * Get system settings and retyrns settings object
 * @return {Object} 
 * @desc 	The object contains the following properties
 * 				settings.AttachmentPath
 * 				settings.AttachmentFileTypes
*/

function crmGetSystemSettings() {
	var settings = {};
	settings.UploadPath = '//ystwythstore/it/crmShare/upload';
	settings.AttachmentPath = '//ystwythstore/it/crmShare/attachments/';
	settings.AttachmentFileTypes = [ "png", "gif", "jpg","jpeg", "pdf", "doc", "docx","tif","tiff","TIFF","msg","eml"]; 
	settings.AttachmentFileSize = '25M';
	return settings
}


/*********************************************************************************************************************************/

/**
 * Creates an enquiry object with default values set
 * @return {Object} 
 * @desc 	The object contains the following properties
 * 				Object.Subject&lt;br/&gt;
 * 				Object.Details&lt;br/&gt;
 * 				Object.CategoryID&lt;br/&gt;
 * 				Object.ID&lt;br&gt;
 * 				Object.FormID&lt;br&gt;
*/

function crmInitialiseEnquiry() {
	var enq = {};
	enq.Subject = system.variables.$FORMID.value;
	enq.Details = '';
	enq.CategoryID = 0;
	enq.ID = 0;
	enq.FormID = 0;
	
	return enq
}

/*********************************************************************************************************************************/

/**
 * Creates a customer object with default values set
 * @return {Object}
 * @desc 	The object contains the following properties
 * 				Object.Forename&lt;br/&gt;
 * 				Object.Surname&lt;br/&gt;
 * 				Object.Email&lt;br/&gt;
 * 				Object.Title&lt;br&gt;
 * 				Object.otherTitle&lt;br/&gt;
 * 				Object.Telephone&lt;br/&gt;
 * 				Object.Mobile&lt;br/&gt;
 * 				Object.AccountRef&lt;br&gt;
 * 				Object.CustID&lt;br&gt;
 * 				Object.Addr1&lt;br/&gt;
 * 				Object.Addr2&lt;br/&gt;
 * 				Object.Addr3&lt;br/&gt;
 * 				Object.Town&lt;br/&gt;
 * 				Object.County&lt;br/&gt;
 * 				Object.PostCode&lt;br/&gt;
 * 				Object.UPRN&lt;br/&gt;
 * 				Object.PropertyRef&lt;br/&gt;
 * 				Object.BusinessRef&lt;br/&gt;
 * 				Object.BusinessName&lt;br/&gt;
 * 				Object.StartDate
*/

function crmInitialiseCustomer() {
	var cust = {};
	cust.Forename = '';
	cust.Surname = '';
	cust.Email = '';
	cust.Title = '';
	cust.otherTitle = '';
	cust.Telephone = '';
	cust.Mobile = '';
	cust.AccountRef = '';

	cust.CustID = 0;
	cust.Addr1 = '';
	cust.Addr2 = '';
	cust.Addr3 = '';
	cust.Town = '';
	cust.County = '';
	cust.PostCode = '';
	cust.UPRN = '';
	cust.PropertyRef = '';
	cust.BusinessRef = '';
	cust.BusinessName = '';
	cust.StartDate = '01/01/1900';
	
	return cust
}

/**
 * Function to create an entry in the CRM Log
 * @param FormID as Integer - Current form ID
 * @param Action as String - Insert, Update, Delete
 * @param Details as String - Description (Max 100 chars)
 * @param UserID as String - User ID 
 * @param Type as Integer - 1=Error, 2=Warning, 3=Information
 */

function crmLog (FormID, Action, Details, Type) {
		
		try {
			var con = null;
			var stmt = null;	
			con = system.getDatabaseConnection(strCon);
			
	  	stmt = con.prepareStatement("insert into CRM_Log (Time_Stamp, Form_ID, Action, Details, User_ID, Session_ID, Browser_IP, Browser_Type, Form, Page, Type) "
	  	+ " values (getdate(),?,?,?,?,?,?,?,?,?,?)");
	  	stmt.setString(1,FormID);
	  	stmt.setString(2,Action);
	  	stmt.setString(3,Details);
	  	stmt.setString(4,system.variables.$USER.value);
	  	stmt.setString(5,system.variables.$SESSION_ID.value);
	  	stmt.setString(6,system.variables.$BROWSER_IP_ADDRESS.value);
	  	stmt.setString(7,system.variables.$BROWSER_TYPE.value);
	  	stmt.setString(8,system.variables.$FORMID.value);
	  	stmt.setString(9,system.variables.$CURRENT_PAGE.value);
	  	stmt.setInt(10, Type);
	  		  	
	  	stmt.execute();
		}
		catch (e) {
			log("__**ERROR** - crmLog - " + e);
		}
		finally	{
			try {
		  	if(stmt) stmt.close();
		  	if(con) con.close();
			}
			catch(e) {
				log("## CRM ## - **ERROR** - Unable to close database connection,recordset or statement");
			}
		}
}

/**
 * Function to insert a row into the schedule log
 */
 
function crmScheduleLog (BatchID, ExtSystem, Comments, InternalID, ExternalID, Status, Flag) {

	if(InternalID == null){InternalID = 0};
	if(ExternalID == null){ExternalID = 0};
	if(BatchID == null){BatchID = 0};
	
	try {
		var con = null;
		var stmt = null;
		con = system.getDatabaseConnection(strCon);
  	stmt = con.prepareStatement("insert into sys_Schedule_Log (System, DateStamp, Comments, Internal_ID, External_ID, Status, Flag, Ebase_Form, Ebase_Page, Batch_ID) values "
  					+ "(?,getdate(),?,?,?,?,?,?,?,?)");

		stmt.setString(1, ExtSystem);
		stmt.setString(2, Comments);
		stmt.setInt(3, InternalID);
		stmt.setInt(4, ExternalID);
		stmt.setString(5, Status);
		stmt.setString(6, Flag);
		stmt.setString(7, system.variables.$FORMID.value);
		stmt.setString(8, system.variables.$CURRENT_PAGE.value);
		stmt.setInt(9, BatchID);		
		
  	stmt.execute();

	}
	catch (e) {
		log("__**ERROR** - crmScheduleLog - " + e);
	}
	finally	{
	  if(stmt) stmt.close();
	  if(con) con.close();
	}

}

///**
// * Main function for creating a CRM Enquiry record
// * @param {Object} Enquiry Details 
// * @param {Object} Customer Details 
// * @return EnquiryID as integer
// */
//
//function crmCreateEnquiryNoMods (cust, enq) {
// /* CategoryID parameter is no longer needed!! */
//
//	enq.Subject = system.variables.$FORMID.value;
//	enq.CategoryID = crmGetFormCategory(enq.formID);
//	enq.ID = crmGetSequenceID('Enquiry_ID');
//
// 
//	if (enq.CategoryID == null || enq.CategoryID == 'undefined' || enq.CategoryID == 0) {
//		enq.CategoryID = 46; //Main reception
//	}
//
//	var custID = 0;
//	var addressID = 0;
//
//	//Check to see if customer exists and create if not!
//	custID = crmInsertCustomerNoMods(cust);
//	cust.CustID = custID;
//	//Check to see if customers address already exists and create if not!
//	addressID = crmInsertAddressNoMods(cust);
//	
//	
//	if (custID &gt;= 0 ) {
//
//		//Get responsible officer for category
//		//var respOfficer = crmGetResponsibleOfficer(enq.CategoryID);
//
//		try {
//			//Insert Enquiry Record
//			var con = system.getDatabaseConnection(strCon);
//			var stmt;
//		
//	  	stmt = con.prepareStatement("insert into CRM_Enquiries (Enquiry_ID,Subject,Details,Customer_ID,Status,Source,form_id,srvc_Category_ID,Assigned_To,date_created,created_by) values "
//	  	+ "(\'" + enq.ID + "\','" + stripNull(enq.Subject) + "\',\'" + stripNull(enq.Details) + "\',\'" + custID + "\','W',\'Web\',\'" + stripNull(enq.formID) + "\',\'" + enq.CategoryID + "\',"
//	  	+ "\'" + respOfficer + "\',GETDATE(),'WEB')");
//
//	  	stmt = con.prepareStatement("insert into CRM_Enquiries (Enquiry_ID,Subject,Details,Customer_ID,Status,Source,form_id,srvc_Category_ID,Assigned_To,date_created,created_by) values "
//	  	+ "(\'" + enq.ID + "\','" + stripNull(enq.Subject) + "\',\'" + stripNull(enq.Details) + "\',\'" + custID + "\','W',\'Web\',\'" + stripNull(enq.formID) + "\',\'" + enq.CategoryID + "\',"
//	  	+ "\'" + respOfficer + "\',GETDATE(),'WEB')");
//	  
//	  	stmt.execute();
//		}
//		catch (e) {
//			log("__**ERROR** - crmCreateEnquiry - " + e);
//			crmLog(enq.formID, "", "Error creating enquiry - " + e, 1)
//		}
//		finally {
//		  if(stmt) stmt.close();
//		  if(con) con.close();	
//		}
//		
//		//enq.ID = crmLastEnquiryID();
//		
//		crmLog(enq.formID, "Insert", "Enquiry Created - " + enq.ID, 3)
//		enq.Ref = crmGenerateEnquiryRef(enq.ID, 'W')
//	}
//	else {
//		enq.ID = 0;
//		crmLog(enq.formID, "Insert", "Error creating enquiry - No customer ID", 1)
//	}
//
//	return enq.ID
// 
//}
//
///** DEPRICATED FUNCTION *******
// *  
// * Main function for creating a CRM Enquiry record
// * @param CategoryID as Integer
// * @param FormID as Integer
// * @param Anonymous as Boolean - Allow creation of enquiry with no customer info?
// * @return EnquiryID as integer
// */
//
//function crmCreateEnquiry (FormID, Anonymous) {
// /* CategoryID parameter is no longer needed!! */
// 
//	var enq = {};
//	enq.Subject = system.variables.$FORMID.value;
//	enq.Details = '';
//	enq.CategoryID = crmGetFormCategory(FormID);
//	enq.ID = crmGetSequenceID('Enquiry_ID');
//	enq.CustID = 0;
// 
//	for each (var m in form.currentPage.getControlsByModifier('crmSubject')) {				
//			enq.Subject = m.field.getValue();
//	}
//	
//	for each (var m in form.currentPage.getControlsByModifier('crmDetails')) {				
//			enq.Details = m.field.getValue();
//	}
//
//	if (enq.Category == null || enq.Category == 'undefined' || enq.Category == 0) {
//		enq.Category = 46; //Main reception
//	}
//
//	if (Anonymous == true) {
//
//		/* If anonymous is enabled then name and email address are optional */
//		var cust = new Object();
//		cust.Forename = '';
//		cust.Surname = '';
//		cust.Email = '';
//	 
//		for each (var m in form.currentPage.getControlsByModifier('crmForename')) {cust.Forename = m.field.getValue()}
//		for each (var m in form.currentPage.getControlsByModifier('crmSurname')) {cust.Surname = m.field.getValue()}
//		for each (var m in form.currentPage.getControlsByModifier('crmEmail')) {cust.Email = m.field.getValue()}
//	 
//		//If basic informaiton has been entered then create customer record.
//		if (cust.Forename != null &amp;&amp; cust.Surname != null) {
//			enq.CustID = crmInsertCustomer();
//			crmInsertAddress(enq.CustID);
//		}
//	}
//	else {
//		enq.CustID = crmInsertCustomer();
//		crmInsertAddress(enq.CustID);
//	}
//
//	if (enq.CustID &gt;= 0 ) {
//
//		//Get responsible officer for category
//		var respOfficer = crmGetResponsibleOfficer(enq.CategoryID);
//
//		//Insert Enquiry Record
//		var con = system.getDatabaseConnection(strCon);
//		var stmt;
//	
//		try {
//	  	stmt = con.prepareStatement("insert into dbo.CRM_Enquiries (Enquiry_ID,Subject,Details,Customer_ID,Status,Source,form_id,srvc_Category_ID,Assigned_To,date_created,created_by) values "
//	  	+ "(\'" + enq.ID + "\','" + stripNull(enq.Subject) + "\',\'" + stripNull(enq.Details) + "\',\'" + enq.CustID + "\','N',\'Web\',\'" + stripNull(FormID) + "\',\'" + enq.CategoryID + "\',"
//	  	+ "\'" + respOfficer + "\',GETDATE(),'WEB')");
//	  
//	  	stmt.execute();
//
//			crmLog(FormID, "Insert", "Enquiry Created - " + enq.ID, 3)
//			enq.Ref = crmGenerateEnquiryRef(enq.ID, 'W')
//			
//		}
//		catch (e) {
//			log("__**ERROR** - crmCreateEnquiry - " + e);
//			crmLog(FormID, "", "Error creating enquiry - " + e, 1)
//		}
//		finally {
//		  if(stmt) stmt.close();
//		  if(con) con.close();	
//		}		
//	}
//	else {
//		enq.ID = 0;
//		crmLog(FormID, "Insert", "Error creating enquiry - No customer ID", 1)
//	}
//
//	return enq
// 
//}


/******************************************************************************************
 * Attaches a file to an enquiry. Adds record into the database and moves the file to the correct
 * location.
 * @param {integer} EnquiryID 
 * @param {string} FilePath 
 * @param {boolean} Downloadable
 * @param {integer} ActionID 
 * @return {string} 
 */

function crmAttachFile (EnquiryID, FilePath, Downloadable, ActionID) {

	//Rename and move the file to the CRM attachment folder
	var AttachmentID = crmGetSequenceID("Attachment_ID");
	var oldPath = FilePath;
	var ext = getFileExtension(FilePath);
	var newName = EnquiryID + "_" + AttachmentID + '.' + ext;

	if (ActionID === undefined) {
		ActionID = 0;
	}
	
	if(!Downloadable) {var Download = false}
	else {var Download = true}
	
	if (TestServer) {
		var newPath = "//ystwythstore/it/crmShare/attachmentsTest/" + newName;
	}
	else {
		var newPath = "//ystwythstore/it/crmShare/attachments/" + newName;
	}

	try {
		var move = FileServices.moveFile(oldPath, newPath);

		
	
		try {
			//Create entry in the database to attach file to enquiry
			var con = system.getDatabaseConnection(strCon);
			var stmt;
				
	  	stmt = con.prepareStatement("insert into CRM_Enquiry_Attachments (Attachment_ID, Enquiry_ID,FileName,FilePath,FileType,Downloadable,Action_ID,Date_Created) "
	  	+ "values (?,?,?,?,?,?,?,GETDATE())");
	  	
	  	stmt.setInt(1, AttachmentID);
			stmt.setInt(2, EnquiryID);
			stmt.setString(3, newName);
			stmt.setString(4, newPath);
			stmt.setString(5, ext);
			stmt.setBoolean(6, Download);
			stmt.setInt(7, ActionID);
			
	  	stmt.execute();
	
	  	//crmLog(0, "ATTACH", "File " + newName + " attached to " + EnquiryID, 3);
	
		}
		catch (e) {
			log("__**ERROR** - crmAttachFile - " + e);
			crmLog(0, "ATTACH", "Error attaching file (" + EnquiryID + ") - " + e, 1);			
		}	
		finally	{
		  if(stmt) stmt.close();	
		  if(con) con.close();	
		}
	}
	catch (e) {
			log("__**ERROR** - crmAttachFile - Error moving the file - " + e);
			crmLog(0, "ATTACH", "Error attaching file (" + EnquiryID + ") - " + e, 1);			

			return "Error";
	}

	return newPath;
}

///******************************************************************************************
// * Checks to see if customer already exists in CRM DB, if not then creates new customer
// * and returns the Customer ID, otherwsie just resturns the matching Customer ID.
// 
// * @param UserID as String (currently logged in user or system name)
// * @param AddAddress Boolean)
// * @return CustomerID as integer
// */
//
//function crmInsertCustomerNoMods (cust) {
//	
//	var custID = crmCheckCustomer(cust.Email, cust.Forename, cust.Surname);
//
//	if (custID &lt;= 0 ) { 
//		
//		//Create a new customer record
//		custID = crmGetSequenceID("Customer_ID");
//		
//		var stmt;
//		
//		try {
//			
//			var con = system.getDatabaseConnection(strCon)
//			
//			stmt = con.prepareStatement("insert into CRM_Customers (ID,title,other_Title,firstname,surname,telephone,mobile,email,date_created,created_by,Language, verification_level, Type) values "
//		  	+ "(?,?,?,?,?,?,?,?,GETDATE(),?,?,?,'R')");
//		  	stmt.setInt(1,custID);
//		  	stmt.setString(2,cust.Title);
//		  	stmt.setString(3,cust.otherTitle);
//		  	stmt.setString(4,cust.Forename);
//		  	stmt.setString(5,cust.Surname);
//				stmt.setString(6,cust.Telephone);
//				stmt.setString(7,cust.Mobile);
//				stmt.setString(8,cust.Email);
//				stmt.setString(9,User);
//				stmt.setString(10,system.variables.$LANGUAGE.value);
//				stmt.setInt(11,0);
//				
//		  	stmt.execute();
//
//	  	crmLog(0, "Insert", "Customer Created - " + custID, 3);
//		
//		}
//		catch (e) {
//			log("__**ERROR** - crmInsertCustomer - " + e);
//			crmLog(0, "Insert", "Error inserting customer - " + e, 1);	
//		}
//		finally {
//		  if(stmt) stmt.close();
//		  if(con) con.close();
//		}
//	
//	}
//	else {
//		//Update details on customer record
//		crmUpdateCustomerDetails(custID, cust.Title, cust.otherTitle, cust.Telephone, cust.Mobile, cust.AccountRef);
//	}
//	
//	return custID;
// 
//}


/*********************************************************************************************************************************/

/**
 * Checks to see if customer already exists in CRM DB, if not then creates new customer
 * and returns the Customer ID, otherwsie just resturns the matching Customer ID.
 
 * @param UserID as String (currently logged in user or system name)
 * @param AddAddress Boolean)
 * @return CustomerID as integer

 */

function crmInsertCustomer () {

	var cust = new Object();
	cust.Forename = '';
	cust.Surname = '';
	cust.Email = '';
	cust.Title = '';
	cust.otherTitle = '';
	cust.Telephone = '';
	cust.Mobile = '';
	cust.AccountRef = '';
	 
	for each (var m in form.currentPage.getControlsByModifier('crmForename')) {				
			cust.Forename = m.field.getValue();
	}
	for each (var m in form.currentPage.getControlsByModifier('crmSurname')) {				
			cust.Surname = m.field.getValue();
	}
	for each (var m in form.currentPage.getControlsByModifier('crmEmail')) {				
			cust.Email = m.field.getValue();
	}
	for each (var m in form.currentPage.getControlsByModifier('crmTitle')) {				
			cust.Title = m.field.getValue();
	}
	for each (var m in form.currentPage.getControlsByModifier('crmOtherTitle')) {				
			cust.otherTitle = m.field.getValue();
	}
	for each (var m in form.currentPage.getControlsByModifier('crmTelephone')) {				
			cust.Telephone = m.field.getValue();	
	}
	for each (var m in form.currentPage.getControlsByModifier('crmMobile')) {	
			cust.Mobile = m.field.getValue()
	}
	for each (var m in form.currentPage.getControlsByModifier('crmAccountRef')) {	
			cust.AccountRef = m.field.getValue()
	}
	
	var custID = crmCheckCustomer(cust.Email, cust.Forename, cust.Surname);

	if (custID &lt;= 0 ) { 
		
		//Create a new customer record
		custID = crmGetSequenceID("Customer_ID");
		
		try {

			var con = system.getDatabaseConnection(strCon)
			var stmt;
		
	  	stmt = con.prepareStatement("insert into CRM_Customers (ID,title,other_Title,firstname,surname,telephone,mobile,email,date_created,created_by,Language, verification_level, Type) values "
	  	+ "(?,?,?,?,?,?,?,?,GETDATE(),?,?,?,'R')");
	  	stmt.setInt(1,custID);
	  	stmt.setString(2,cust.Title);
	  	stmt.setString(3,cust.otherTitle);
	  	stmt.setString(4,cust.Forename);
	  	stmt.setString(5,cust.Surname);
			stmt.setString(6,cust.Telephone);
			stmt.setString(7,cust.Mobile);
			stmt.setString(8,cust.Email);
			stmt.setString(9,User);
			stmt.setString(10,system.variables.$LANGUAGE.value);
			stmt.setInt(11,0);

	  	stmt.execute();

	  	//crmLog(0, "Insert", "Customer Created - " + custID, 3);
		}
		catch (e) {
			log("__**ERROR** - crmInsertCustomer - " + e);
			crmLog(0, "Insert", "Error inserting customer - " + e, 1);	
		}
		finally {
		  if(stmt) stmt.close();
		  if(con) con.close();
		}
	
	}
	else {
		//Update details on customer record
		crmUpdateCustomerDetails(custID, cust.Title, cust.otherTitle, cust.Telephone, cust.Mobile);
	}
	
	return custID;
 
}

/*********************************************************************************************************************************/

/**
 * Inserts an action record against an enquiry
 
 * @param {int} EnquiryID 
 * @param {string} ActionType 
 * @param {string} Description 

 */

function crmInsertAction (EnquiryID, ActionType, Description) {

	//Create a new Action Record
	actionID = crmGetSequenceID("Action_ID");
	
	try {	
		var con = system.getDatabaseConnection(strCon)
		var stmt;
		
		stmt = con.prepareStatement("insert into CRM_Enquiry_Actions (ID,Enquiry_ID,Type,Details,Date,Agent) values "
		+ "?,?,?,?, getdate(),?)");
		stmt.setInt(1,actionID );
		stmt.setInt(2,EnquiryID );
		stmt.setString(3,ActionType );
		stmt.setString(4,Description );
		stmt.setString(5,User );
	
		stmt.execute();
	
		//crmLog(0, "Insert", "Action recorded - " + ActionType + " on enquiry " + EnquiryID, 3);
	}
	catch (e) {
		log("__**ERROR** - crmInsertAction - " + e);
		crmLog(0, "Insert", "Error inserting action - " + e, 1);	
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();
	}

	return actionID;
 
}

///***********************************************************************************************************
//
// * Adds an account reference to a customer
// * @param CustomerID as Integer
// * @param Reference as string
// * @param Type as String (Reference type, "AUTO" for auto detect)
// * @param User as string
// */
//
//function crmInsertCustomerReference (CustomerID, Reference,Type) {
//
//	if (Reference == null || Reference == '') { return 0};
//
//	if (Type = 'AUTO') {
//		if (Reference.substring(0,1) == '7') {
//			Type = 'CTAX';
//		}
//		else if (Reference.substring(0,1) == '9') {
//			Type = 'HB';
//		}
//		else if (Reference.substring(0,2) == '10') {
//			Type = 'NNDR';
//		}
//		else {
//			Type = 'Unknown';
//		}
//	}
//	
//	var con = system.getDatabaseConnection(strCon);
//	var stmt;
//	
//	try {
//	
//		stmt = con.prepareStatement("insert into crm_Customer_References (customer_id,system,reference,date_created,created_by) select"
//		+ "\'" + CustomerID + "\',\'" + Type + "\',\'" + Reference + "\', getdate(),\'" + User + "\' where not exists"
//		+ "(select 1 from crm_Customer_References where customer_id = \'" + CustomerID + "\' and system = \'" + Type + "\' and reference = \'" + Reference + "\')");
//	
//		stmt.execute();
//	
//		crmLog(0, "Insert", "Customer reference " + Reference + " added to customer ID " + CustomerID, 3);
//	}
//	
//	catch (e) {
//		crmLog(0, "Insert", "Error creating customer reference record - " + e, 1);	
//	}
//	finally {
//	  if(stmt) stmt.close();
//	  if(con) con.close();	
//	}
//
//}

/*********************************************************************************************************************************/

/**
 * Checks to see if address already exists for the specified customer in CRM DB, if not then creates new address record
 * @param UserID as String (currently logged in user or system name)
 * @param {object} Customer   
 * @return AddressID as integer
 */

function crmInsertAddressNoMods (cust) {

	var addressID = 0;

	if (cust.PostCode == '' || cust.PostCode == null) {
		addressID = 0;
	}
	else {
		//If there is a post code then continue to add address

		cust.PostCode = formatPostCode(cust.PostCode);

		if (cust.UPRN &gt; 0) {
			addressID = crmCheckAddressUPRN (cust);	
		}
		else {
			addressID = crmCheckAddress(cust);
		}
			
		if (addressID &lt;= 0 ) {

			addressID = crmGetSequenceID("Address_ID");
			
			try {

				//Insert Address Record
				var con = system.getDatabaseConnection(strCon);
				var stmt;
			
				if (cust.BusinessName == null || cust.BusinessName == '') {
					//Residential Address
										
					stmt = con.prepareStatement("insert into CRM_Customer_Addresses (address_id,customer_id,uprn,type,address1,address2,address3,town,county,postcode,date_created,created_by) values "
			  	+ "(?,?,?,'R',?,?,?,?,?,?,GETDATE(),?)");
			  	stmt.setInt(1,addressID);
			  	stmt.setInt(2,cust.CustID);
			  	stmt.setInt(3,cust.UPRN);
					stmt.setString(4,cust.Addr1);
					stmt.setString(5,cust.Addr2);
					stmt.setString(6,cust.Addr3);
					stmt.setString(7,cust.Town);
					stmt.setString(8,cust.County);
					stmt.setString(9,cust.PostCode);
					stmt.setString(10,'WEB');

				}
				else {
					//Business Address
					log("__ Creating new business address!");
	
					stmt = con.prepareStatement("insert into CRM_Customer_Addresses (address_id,customer_id,uprn,type,BusinessName,address1,address2,address3,town,county,postcode,date_created,created_by) values "
			  	+ "?,?,?,'C',?,?,?,?,?,?,?,GETDATE(),?)");
			  	stmt.setInt(1,addressID);
			  	stmt.setInt(2,cust.CustID);
			  	stmt.setInt(3,cust.UPRN);
			  	stmt.setString(4,cust.BusinessName);
					stmt.setString(5,cust.Addr1);
					stmt.setString(6,cust.Addr2);
					stmt.setString(7,cust.Addr3);
					stmt.setString(8,cust.Town);
					stmt.setString(9,cust.County);
					stmt.setString(10,cust.PostCode);
					stmt.setString(11,'WEB');

				}
				
		  	stmt.execute();
			}
		
			catch (e) {
				log("__**ERROR** - crmInsertAddress - " + e);
				crmLog(0, "Insert", "Error Inserting Address (" + cust.CustID + ", " + cust.Addr1 + ", " + cust.PostCode + ", " + cust.BusinessName + " - " + e, 1)	
			}
			finally	{
			  if(stmt) stmt.close();
			  if(con) con.close();
			}
	
			crmUpdateDefaultAddress(cust.CustID, addressID);
			
		}
		else {
			//If the address already exists just update the default address for the customer.
			crmUpdateDefaultAddress(cust.CustID, addressID);
		}
	}
	
	return addressID;
 
}

///*********************************************************************************************************************************/
//
///**
// * Checks to see if address already exists for the specified customer in CRM DB, if not then creates new address record
// * @param UserID as String (currently logged in user or system name)
// * @param CustomerID integer
// * @return AddressID as integer
// */
//
//function crmInsertAddress (CustomerID) {
//
//	add = new Object();
//	add.CustID = CustomerID;
//	add.Addr1 = '';
//	add.Addr2 = '';
//	add.Addr3 = '';
//	add.Town = '';
//	add.County = '';
//	add.PostCode = '';
//	add.UPRN = '';
//	add.PropertyRef = '';
//	add.BusinessRef = '';
//	add.BusinessName = '';
//	add.StartDate = '01/01/1900';
//	
//			
//	for each (var m in form.currentPage.getControlsByModifier('crmPostCode')) {				
//			add.PostCode = m.field.getValue();
//	}
//
//	var addressID = 0;
//
//	log("__ Postcode: " + add.PostCode);
//	
//	if (add.PostCode == '' || add.PostCode == null) {
//		addressID = 0;
//	}
//	else {
//		//If there is a post code then continue to add address
//
//		add.PostCode = formatPostCode(add.PostCode);
//
//		for each (var m in form.currentPage.getControlsByModifier('crmAddress1')) {				
//			add.Addr1 = m.field.getValue();
//		}
//		for each (var m in form.currentPage.getControlsByModifier('crmAddress2')) {				
//			add.Addr2 = m.field.getValue();
//		}
//		for each (var m in form.currentPage.getControlsByModifier('crmAddress3')) {				
//			add.Addr3 = m.field.getValue();
//		}
//		for each (var m in form.currentPage.getControlsByModifier('crmTown')) {				
//			add.Town = m.field.getValue();
//		}
//		for each (var m in form.currentPage.getControlsByModifier('crmCounty')) {				
//			add.County = m.field.getValue();
//		}
//		for each (var m in form.currentPage.getControlsByModifier('crmUPRN')) {				
//			add.UPRN = m.field.getValue();		
//		}
//		for each (var m in form.currentPage.getControlsByModifier('crmPropertyRef')) {				
//			add.PropertyRef = m.field.getValue();
//		}
//		for each (var m in form.currentPage.getControlsByModifier('crmBusinessRef')) {				
//			add.BusinessRef = m.field.getValue();
//			if (add.BusinessRef == 'undefined') {add.BusinessRef = null};
//		}
//		for each (var m in form.currentPage.getControlsByModifier('crmBusinessName')) {				
//			add.BusinessName = m.field.getValue();
//			if (add.BusinessName == 'undefined') {add.BusinessName = null};
//		}
//		
//		if (add.BusinessName == '') {add.BusinessName = null};
//		
//		for each (var m in form.currentPage.getControlsByModifier('crmStartDate')) {				
//				add.StartDate = m.field.getValue();
//		}
//
//		if (add.UPRN &gt; 0) {
//			addressID = crmCheckAddressUPRN (add);	
//		}
//		else {
//			addressID = crmCheckAddress(CustomerID, add.Addr1, add.PostCode, add.BusinessName);
//		}
//			
//		if (addressID &lt;= 0 ) {
//
//			addressID = crmGetSequenceID("Address_ID");
//			
//			//Insert Address Record
//			
//	
//			try {
//					var con = system.getDatabaseConnection(strCon);
//					var stmt;
//				if (add.BusinessName == null || add.BusinessName == '') {
//					//Residential Address
//					log("__ Creating new residential address!");
//					//log ("__ *******  START-DATE = " + add.StartDate + " **********");
//					
//			  	stmt = con.prepareStatement("insert into CRM_Customer_Addresses (address_id,customer_id,uprn,type,address1,address2,address3,town,county,postcode,date_created,created_by) values "
//			  	+ "(\'" + addressID + "\',\'" + CustomerID + "\',\'" + stripNull(add.UPRN) + "\','R',\'" + stripNull(add.Addr1) + "\',\'" + stripNull(add.Addr2) + "\',\'" + stripNull(add.Addr3) + "\',\'" + stripNull(add.Town) + "\',\'" + stripNull(add.County) + "\',"
//			  	+ "\'" + stripNull(add.PostCode) + "\',GETDATE(),\'" + User + "\')");
//
//			  	crmLog(0, "Insert", "Residential Address Created", 3);
//				}
//				else {
//					//Business Address
//					log("__ Creating new business address!");
//					
//			  	stmt = con.prepareStatement("insert into CRM_Customer_Addresses (address_id,customer_id,propertyRef,businessRef,BusinessName,type,address1,address2,address3,town,county,postcode,date_created,created_by) values "
//			  	+ "(\'" + addressID + "\',\'" + CustomerID + "\',\'" + stripNull(add.PropertyRef) + "\',\'" + stripNull(add.BusinessRef) + "\',\'" + stripNull(add.BusinessName) + "\','B',\'" + stripNull(add.Addr1) + "\',"
//			  	+ "\'" + stripNull(add.Addr2) + "\',\'" + stripNull(add.Addr3) + "\',\'" + stripNull(add.Town) + "\',\'" + stripNull(add.County) + "\',\'" + stripNull(add.PostCode) + "\',GETDATE(),\'" + User + "\')");
//
//			  	crmLog(0, "Insert", "Business Address Created", 3);
//				}
//				
//		  	stmt.execute();
//			}
//		
//			catch (e) {
//				log("__**ERROR** - crmInsertAddress - " + e);
//				crmLog(0, "Insert", "Error Inserting Address (" + CustomerID + ", " + add.Addr1 + ", " + add.PostCode + ", " + add.BusinessName + " - " + e, 1)	
//			}
//			finally	{
//			  if(stmt) stmt.close();
//			  if(con) con.close();
//			}
//		
//			crmLog(0, "Insert", "Address Created - " + addressID, 3);
//
//			crmUpdateDefaultAddress(CustomerID, addressID);
//			
//		}
//		else {
//			//If the address already exists just update the default address for the customer.
//			crmUpdateDefaultAddress(CustomerID, addressID);
//		}
//	}
//	
//	return addressID;
// 
//}

/******************************************************************************/

/**
 * Checks to see customer already exists in the CRM DB
 * @param email string
 * @param Forename string
 * @param Surname string
 * @return CustomerID as integer
 */
 
function crmCheckCustomer( email, Forename, Surname ) {

	var result = 0;

	try {

		if (!email) {
			return 0;
			// Dangerous to match on forename / surname only.
			//stmt = con.prepareStatement("select max(ID) as ID from CRM_Customers where firstname = ? and surname = ?");
			//stmt.setString(1, Forename);
			//stmt.setString(2, Surname);
		}
		else {
			var stmt;
			var rs;

			var con = system.getDatabaseConnection(strCon);
			
			stmt = con.prepareStatement("select max(ID) as ID from CRM_Customers where email = ?  and firstname = ? and surname = ?");	
			stmt.setString(1, email);
			stmt.setString(2, Forename);
			stmt.setString(3, Surname);
		}

		rs = stmt.executeQuery();

  	while (rs.next()){
			result = rs.getInt("ID");
			log("Exisiting customer found... " + result);
		}
		crmLog(0,"Query", "Existing customer? - " + result, 3);
	}
	catch (e) {
		log("__**ERROR** - crmCheckCustomer - " + e);
		crmLog(0, "Query", "Error querying customer (" + email + ", " + Forename + ", " + Surname + ") - " + e, 1);
	}	
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}			
	  return result;
}

/******************************************************************************/

/**

 * Checks to see address already exists in the CRM DB using the UPRN
 
 * @param CustomerID integer
 * @param UPRN integer
 * @return AddressID as integer

 */
 
function crmCheckAddressUPRN(addr) {
	
	var result = 0;

	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
	
		stmt = con.prepareStatement("select Address_ID from CRM_Customer_Addresses where customer_id = ? and uprn = ?");
		stmt.setInt(1,addr.CustID);
		stmt.setInt(2,addr.UPRN);
		
  	rs = stmt.executeQuery();

  	while (rs.next()){
				result = rs.getInt("Address_ID");
		}
		
//		if (result &gt; 0) {
//			//Update the exisiting address
//			stmt = con.prepareStatement("update CRM_Customer_Addresses set address1 = \'" + stripNull(addr.Addr1) + "\',address2 = \'" + stripNull(addr.Addr2) + "\'"
//			+ ",address3 = \'" + stripNull(addr.Addr3) + "\',town = \'" + stripNull(addr.Town) + "\',county = \'" + stripNull(addr.County) + "\',postcode = \'" + stripNull(addr.PostCode) + "\'"
//			+ ",date_modified = getdate(),modified_by = 'WEB' where address_id = \'" + result + "\'");
//
//			stmt.execute();
//
//		crmLog(0,"DEBUG", "Updated the address - " + result, 3);
//		
//		}
	}
	catch (e) {
		log("__**ERROR** - crmCheckAddressUPRN - " + e);
		crmLog(0, "Query", "Error querying address using UPRN (" + addr.CustID + "," + addr.UPRN + " - " + e, 1);
	}
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
	
 	return result;
}

/******************************************************************************

 * Checks to see address already exists in the CRM DB
 
 * @param CustomerID integer
 * @param Address1 string
 * @param PostCode string
 * @param UPRN integer
 * @return AddressID as integer

 */
 
function crmCheckAddress( CustomerID, Address1, PostCode) {

	var result = 0;

	try {

		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
	
  	stmt = con.prepareStatement("select address_ID from CRM_Customer_Addresses where customer_id = ?  and postcode = ? and address1 = ?");
		stmt.setString(1, CustomerID);
		stmt.setString(2, PostCode);
		stmt.setString(3, Address1);
		
  	rs = stmt.executeQuery();

  	while (rs.next()){
				result = rs.getInt("Address_ID");
			}
	  }

	catch (e) {
		log("__**ERROR** - crmCheckAddress - " + e);
		crmLog(0, "Query", "Error querying address (" + CustomerID + ", " + Address1 + ", " + PostCode + ", " + BusinessName + " - " + e, 1);
	}
	
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
 	return result;
}

/*********************************************************************************************************************************/

/**
 * Updates the default address id of a customer
 * @param CustoemrID as integer
 * @param AddressID as string 
 */

function crmUpdateDefaultAddress( CustomerID, AddressID ) {
		
	try {

		var con = system.getDatabaseConnection(strCon);
		var stmt;
		
	  stmt = con.prepareStatement("update CRM_Customers set Current_Address_ID = ? where ID = ?");
	  stmt.setInt(1,AddressID );
	  stmt.setInt(2,CustomerID );
		stmt.execute();

		crmLog(0, "Update", "Default Address for Customer " + CustomerID + " updated to " + AddressID, 3);
	
	}
	catch (e) {
		log("__**ERROR** - crmUpdateDefaultAddress - " + e);
		crmLog(0, "Update", "Error updating default address (" + CustomerID + " to " + AddressID + " - " + e, 1);
	}
	
	finally	{
	  if(stmt) stmt.close();
	  if(con) con.close();	
	}
}

/*********************************************************************************************************************************/

/**
 * Updates Customer contact information
 * @param CustomerID as integer
 * @param Telephone as integer
 * @param Mobile as integer
 */

function crmUpdateCustomerDetails( CustomerID, Title, OtherTitle, Telephone, Mobile ) {
		
	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
		
		stmt = con.prepareStatement("update crm_Customers set title=?,other_Title=?,Telephone=?,mobile =?,modified_by=?,"
		 +" date_modified=GETDATE(),language=? where ID=?");
		stmt.setString(1,Title);
	  stmt.setString(2,OtherTitle);
		stmt.setString(3,Telephone);
		stmt.setString(4,Mobile);
		stmt.setString(5,'WEB');
		stmt.setString(6,system.variables.$LANGUAGE.value);
		stmt.setInt(7,CustomerID);
		 
		stmt.execute();

		crmLog(0, "Update", "Contact details for " + CustomerID + " updated", 3);
	
	}
	catch (e) {
		log("__**ERROR** - crmUpdateCustomerDetails - " + e);
		crmLog(0, "Update", "Error updating customer details (" + CustomerID + ") - " + e, 1);
	}
	finally	{
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
}


/*********************************************************************************************************************************/

/**
 * Generates a customer reference number
 * @param enquiryNo as integer
 * @param {string} enquiryType 
 * @return ref as string
 */

function crmGenerateEnquiryRef( enquiryNo, enquiryType ) {

	var s = enquiryType;
	var d = new Date();
	var day = d.getDate().toString();
	var m = d.getMonth() + 1;
	var month  = m.toString();

	var y = d.getFullYear().toString().substring(2, 4);

	if ( day.length == 1 ) day = '0' + day;
	if (month.length == 1) month = '0' + month;
	s += day + month + y + '-' + enquiryNo;

//	try {
//		//Update the enquiry record in the Database
//		var con = system.getDatabaseConnection(strCon);
//		var stmt;
//	
//		stmt = con.prepareStatement("update CRM_Enquiries set reference = ? where enquiry_id = ?");
//		stmt.setString(1, s);
//		stmt.setString(2, enquiryNo);
//		
//		stmt.executeUpdate();
//	}
//	catch (e) {
//		log("__**ERROR** - crmGenerateEnquiryyRef - " + e);
//		crmLog(0, "Query", "Error generating enquiry ref (" + enquiryNo + ", " + enquiryType + ") - " + e, 1);		
//	}
//	finally{
//	  if(stmt) stmt.close();
//	  if(con) con.close();
//	}
	return s;
}

///******************************************************************************/
//
///**
// * Attempts to get the UPRN for the address provided
// 
// * @param CustomerID integer
// * @param UPRN integer
// * @return AddressID as integer
// */
// 
//function crmGetAddressUPRN(addr) {
//
//	var con = system.getDatabaseConnection(strCon);
//	var stmt;
//	var rs;
//	
//	var result = 0;
//
//	log("__ Attempting to get address UPRN");
//
//	try {
//		stmt = con.prepareStatement("select * from CRM_Customer_Addresses where customer_id = \'" + addr.CustID + "\' and uprn = \'" + addr.UPRN + "\'");
//  	rs = stmt.executeQuery();
//
//  	while (rs.next()){
//				result = rs.getInt("Address_ID");
//		}
//		
//		crmLog(0,"Query", "Existing UPRN address? - " + result, 3);
//
//		if (result &gt; 0) {
//			//Update the exisiting address
//			stmt = con.prepareStatement("update CRM_Customer_Addresses set address1 = \'" + stripNull(addr.Addr1) + "\',address2 = \'" + stripNull(addr.Addr2) + "\'"
//			+ ",address3 = \'" + stripNull(addr.Addr3) + "\',town = \'" + stripNull(addr.Town) + "\',county = \'" + stripNull(addr.County) + "\',postcode = \'" + stripNull(addr.PostCode) + "\'"
//			+ ",date_modified = getdate(),modified_by = 'WEB' where address_id = \'" + result + "\'");
//
//			stmt.execute();
//
//		crmLog(0,"DEBUG", "Updated the address - " + result, 3);
//		
//		}
//	}
//	catch (e) {
//		log("__**ERROR** - crmCheckAddressUPRN - " + e);
//		crmLog(0, "Query", "Error querying address using UPRN (" + addr.CustID + "," + addr.UPRN + " - " + e, 1);
//	}
//	finally	{
//	  if(rs) rs.close();
//	  if(stmt) stmt.close();
//	  if(con) con.close();
//	}
//	
// 	return result;
//}

///*********************************************************************************************************************************/
//
///**
// * Return the Enquiry Reference for the specified enquiry
// * @param EnquiryID integer
// * @return EnquiryReference integer
// */
//
//function crmGetReference(EnquiryID) {
//
//	log("__ Getting enquiry reference");
//		
//	var con = system.getDatabaseConnection(strCon);
//	var stmt;
//	var rs;
//	
//	try {
//		stmt = con.prepareStatement("select reference from CRM_Enquiries where enquiry_ID = (\'" + EnquiryID + "\')");
//		rs = stmt.executeQuery();
//	
//		while (rs.next()){
//				var result = rs.getString("Reference");			
//			}
//	  }
//	
//	catch (e) {
//		log("__**ERROR** - crmGetReference " + e);
//		crmLog(0, "Query", "Error retrieving enquiry ref - " + e, 1);
//	
//		result = 0;	
//	}
//	finally	{
//	
//	  if(rs) rs.close();
//	  if(stmt) stmt.close();
//		if(con) con.close();
//	
//		log("__ Return Enquiry Reference: " + result);
//		
//	  return result;
//	}
//}

///*********************************************************************************************************************************/
//
///**
// * Return the Enquiry Reference for the specified enquiry
// * @param EnquiryID integer
// * @return EnquiryReference integer
// */
//
//function crmGetCustomerID(EnquiryID) {
//
//	log("__ Getting customer ID");
//		
//	var con = system.getDatabaseConnection(strCon);
//	var stmt;
//	var rs;
//	
//	try {
//		stmt = con.prepareStatement("select customer_id from CRM_Enquiries where enquiry_ID = (\'" + EnquiryID + "\')");
//		rs = stmt.executeQuery();
//	
//		while (rs.next()){
//				var result = rs.getString("Customer_ID");
//			}
//	  }
//	catch (e) {
//		log("__**ERROR** - crmGetCustomer " + e);
//		crmLog(0, "Query", "Error retrieving customer ID - " + e, 1);
//		
//		result = 0;	
//	}
//	finally	{
//	  if(rs) rs.close();
//	  if(stmt) stmt.close();
//		if(con) con.close();
//	
//		return result;	
//	}	
//}




/*********************************************************************************************************************************/

/**
 * Checks field for null value and replaces with blank
 * @param s1 string
 * @return string
 */

function stripNull( s1 ){	

	try {
		if (s1 === null) {
			s1 = "";
		}
		else if (s1 == 'null') {
			s1 = "";
		}
		else {
			s1 = replaceQuote(s1)
		}
	}
	catch (e) {
		s1 = s1;
	}
	 
 return s1
}

/*********************************************************************************************************************************/

/**
 * Either prepends or appends text to an enquiry detail
 * @param {Integer} EnquiryID
 * @param {String} strText
 * @param {String} Option ("Start", "End", "Overwrite") 
 * @returns {String} detailText
 */

function crmUpdateEnquiryDetails(enquiryID,strText,Option) {

	//Get the enquiry detail text
	var detailText = "";
	
	try {

		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
	
		if(Option = 'Overwrite') {
			detailText = strText;
		}
		else {
			stmt = con.prepareStatement("select details from crm_enquiries where enquiry_id = ?");
			stmt.setInt(1,enquiryID );
	  	rs = stmt.executeQuery();
	
	  	while (rs.next()){	
				detailText = rs.getString("details");	
			}
	
			if (detailText == null) {detailText = ""};
			
			if (Location == "Start") {
				detailText = strText + detailText;
			}
			else {
				detailText = detailText + "&lt;br/&gt;" + strText;
			}
		}

		stmt = con.prepareStatement("update crm_Enquiries set details = ? where enquiry_id = ?");
		stmt.setString(1,detailText );
		stmt.setInt(2,enquiryID ); 
		stmt.execute();
		
	}
	catch (e) {
		log("__**ERROR** - crmUpdateEnquiryDetails - " + e);
		crmLog('', "Query", "Error updating enquiry detail for " + enquiryID + " - " + e, 1);
	}
	finally {
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}

	return detailText;
}

/*********************************************************************************************************************************/

/**
 * Updates an enquiries subject line
 * @param {Integer} EnquiryID
 * @param {String} strText
 * @param {Boolean} Append
 */

function crmUpdateEnquirySubject(enquiryID,strText, Append) {
	
	var subject = "";
	
	try {

		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
	
		if (Append == true) {
	  	stmt = con.prepareStatement("select subject from crm_enquiries where enquiry_id = ?");
			stmt.setInt(1,enquiryID );
	  	rs = stmt.executeQuery();
	
	  	while (rs.next()){	
				subject = rs.getString("subject");	
			}
	
			if (subject == null) {subject = ""}
			else { subject += ' - ' + strText};
		}
		else {
			subject = strText;
		}

		stmt = con.prepareStatement("update crm_Enquiries set subject = ? where enquiry_id = ?");
		stmt.setString(1,subject );
		stmt.setInt(2,enquiryID ); 
		stmt.execute();
		
	}
	catch (e) {
		log("__**ERROR** - crmUpdateEnquirySubject - " + e);
		crmLog('', "Query", "Error updating enquiry subject for " + enquiryID + " - " + e, 1);
	}
	finally {
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
}

/*********************************************************************************************************************************/

/**
 * Adds an outstanding balance to an enquiry
 * @param {Integer} EnquiryID
 * @param {Decimal} Amount
 * @param {String} Description
 */

function crmAddEnquiryBalance(enquiryID,Amount, Description) {

	//crmLog(0, "Add", "Adding balance due on enquiry " + enquiryID, 3);
	var BalanceID = crmGetSequenceID('Balance_ID');
	var user  = system.variables.$USER.value;
	
	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
	
		stmt = con.prepareStatement("insert into crm_Enquiry_Balances (balance_id,enquiry_id, Description, Amount_Due, Date_Created, Created_By)"
		+ " values (?,?,?,?, getdate(),user)");
		stmt.setInt(1,BalanceID);
		stmt.setInt(2,enquiryID); 
		stmt.setString(3, Description);
		stmt.setDouble(4, Amount);
		stmt.execute();
		
	}
	catch (e) {
		log("__**ERROR** - crmAddEnquiryBalance - " + e);
		crmLog('', "ERROR", "Error adding balance on enquiry " + enquiryID + " - " + e, 1);
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();
	}

	return BalanceID;

}

/*********************************************************************************************************************************/

/**
 * Adds a payment against a balance record
 * @param {Integer} BalanceID
 * @param {Decimal} Amount
 * @param {String} Reference
 * @param {Integer} AuthCode
 * @param {Integer} AuthCAN
 */

function crmAddPayment(BalanceID, Amount, Reference, AuthCode, AuthCAN, Method) {

	//crmLog(0, "Add", "Adding payment to Balance ID " + BalanceID, 3);
			
	try {

		var con = system.getDatabaseConnection(strCon);
		var stmt;
	
		stmt = con.prepareStatement("insert into crm_Enquiry_Payments (Balance_id, Amount, reference, Auth_Code, Auth_CAN, Method, Date_Created, Created_By)"
		+ " values (?,?,?,?,?,?,getdate(),'WEB')");
		stmt.setInt(1,BalanceID);
		stmt.setDouble(2,Amount); 
		stmt.setString(3,Reference);
		stmt.setInt(4,AuthCode);
		stmt.setInt(5,AuthCAN);
		stmt.setString(6,Method);
		stmt.execute();
	}
	catch (e) {
		log("__**ERROR** - crmAddPayment - " + e);
		crmLog('', "ERROR", "Error adding payment record " + BalanceID + " - " + e, 1);
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
}

///*********************************************************************************************************************************/
//
///**
// * Updates enquiry assigned to value
// * @param {integer} EnquiryID
// * @param {String} Username
// */
//
//function crmUpdateEnquiryOwner(enquiryID, username) {
//
//	var con = system.getDatabaseConnection(strCon);
//	var stmt;
//
//	log ("Updating owner of enquiry id " + enquiryID + " to " + username);
//	
//	try {
//		stmt = con.prepareStatement("update crm_Enquiries set assigned_to = '" + username + "' where enquiry_id = '" + enquiryID + "'");  
//		stmt.execute();
//	}
//	catch (e) {
//		log("__**ERROR** - crmUpdateEnquiryOwner - " + e);
//		crmLog('', "Update", "Error updating enquiry owner for " + enquiryID + " - " + e, 1);
//	}
//	finally {
//	  if(stmt) stmt.close();
//	  if(con) con.close();
//	}
//}

///*********************************************************************************************************************************/
//
///**
// * Updates enquiry DueDate
// * @param {integer} EnquiryID
// * @param {String} Due Date
// */
//
//function crmUpdateEnquiryDueDate(enquiryID, DueDate) {
//
//	var con = system.getDatabaseConnection(strCon);
//	var stmt;
//
//	log ("Updating duedate of enquiry id " + enquiryID + " to " + DueDate);
//
//	var d = moment(DueDate, 'dddd, MMMM Do HH:mm' );
//	DueDate = d.format('DD/MM/YYYY HH:mm:ss');
//	log("d format = " + DueDate);
//	
//	try {
//		stmt = con.prepareStatement("update crm_Enquiries set duedate = convert(smalldatetime,?,103) where enquiry_id = ?");
//		stmt.setString(1, DueDate);
//		stmt.setInt(2, enquiryID);
//		stmt.execute();
//	}
//	catch (e) {
//		log("__**ERROR** - crmUpdateEnquiryDueDate - " + e);
//		crmLog('', "Update", "Error updating due date for " + enquiryID + " - " + e, 1);
//	}
//	finally {
//	  if(stmt) stmt.close();
//	  if(con) con.close();
//
//	  crmLog('', "Update", "Updated due date for " + enquiryID, 3);
//	}
//}

/*********************************************************************************************************************************/

/**
 * Updates enquiry assigned to value
 * @param {integer} EnquiryID
 * @param {String} Username
 */

function crmUpdateEnquiryState(enquiryID, State) {

	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
	
		stmt = con.prepareStatement("update crm_Enquiries set State = ? where enquiry_id = ?"); 
		stmt.setString(1,State );
		stmt.setInt(2,enquiryID );
		stmt.execute();
	}
	catch (e) {
		log("__**ERROR** - crmUpdateEnquiryState - " + e);
		crmLog('', "Update", "Error updating enquiry state " + enquiryID + " - " + e, 1);
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
}


///*********************************************************************************************************************************/
//
///**
// * Formats an email body Ceredigion footer to an email body
// * @param {String} BodyText
// * @returns {String} BodyText
// */
//
//function crmFormatEmail(BodyText) {
//
//	var newBody = BodyText 
//
//	newBody += '&lt;br /&gt;&lt;br /&gt;Cyngor Sir &lt;strong&gt;CEREDIGION&lt;/strong&gt; County Council&lt;br/&gt;Neuadd Cyngor Ceredigion Penmorfa&lt;br/&gt;Aberaeron&lt;br/&gt;Ceredigion&lt;br/&gt;SA46 0PA&lt;br/&gt;01545 570881';
//	newBody += '&lt;br/&gt;&lt;a href="http://www.ceredigion.gov.uk"&gt;www.ceredigion.gov.uk&lt;/a&gt;';
//
//	return newBody;
//}


/*********************************************************************************************************************************/

/**
 * Updates an enquiry status
 * @param {String} Status
 */

function crmUpdateEnquiryStatus(enquiryID,Status) {

	//log ("Updating status for enquiry_id " + enquiryID);
	//crmLog(0, "Update", "Updating enquiry status to " + Status + " for " + enquiryID, 3);

	try {

		var con = system.getDatabaseConnection(strCon);
		var stmt;
	
		stmt = con.prepareStatement("update crm_Enquiries set status = ? where enquiry_id = ?");
		stmt.setString(1,Status );
		stmt.setInt(2, enquiryID);
		stmt.execute();
	}
	catch (e) {
		log("__**ERROR** - crmUpdateEnquiryStatus - " + e);
		crmLog(0, "Query", "Error updating enquiry status for " + enquiryID + " - " + e, 1);
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
}

/********************************************************************************************************/
/**
 * gets the next ID of a sequence
 * @param Sequence string
 * @return nextID as integer
 */
 
function crmGetSequenceID(Sequence) {

 	//log ("Getting next ID for sequence: " + Sequence);
 	//crmLog('', "DEBUG", "Getting next ID for sequence: " + Sequence, 3);
 	
	var NextID = 0;

	try {
		//Get the next ID
		
		var stmt;
		var con = system.getDatabaseConnection(strCon);
		
		stmt = con.prepareCall("? = dbo.getNextSequenceID(?)"); //Execute stored procedure
		stmt.registerOutParameter(1, java.sql.Types.INTEGER);
		
		stmt.setString(2, Sequence);
		
		stmt.execute();

		NextID = stmt.getInt(1);

		if(NextID == null || NextID &lt;= 0) {
			crmLog('', "Query", "Sequence: " + Sequence + " does not exist in the table", 1);
		}
		
	}
	catch (e) {
		log("__**ERROR** - getSequenceID - " + e);
		crmLog('', "Query", "Error getting sequence ID for " + Sequence + " - " + e, 1);
	}
	finally {
		try {
		  	if(stmt) stmt.close();
		  	if(con) con.close();
			}
			catch(e) {
				log("## CRM ## - **ERROR** - Unable to close database connection,recordset or statement");
			}
	}	
	  return NextID;
}

/********************************************************************************************************/
/**
 * Gets the person that the enquiry is assigned to
 * @param {Integer} EnquiryID 
 * @return Person as Object
 */
 
function crmGetEnquiryOwner(EnquiryID) {
	var person = {};

	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
		
  	stmt = con.prepareStatement("select * from crm_enquiry_owner where enquiry_id = ?");
  	stmt.setInt(1, EnquiryID);
  	
  	rs = stmt.executeQuery();

  	while (rs.next()){	
			person.Name = rs.getString("Name");
			person.Email = rs.getString("email");	
		}
	}
	catch (e) {
		log("__**ERROR** - crmGetEnquiryOwner - " + e);
		crmLog('', "Query", "Error getting Enquiry Owner for " + EnquiryID + " - " + e, 1);
	}
	finally {
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}	
	  return person;
}

/*********************************************************************************************************************************/

/**
 * Updates the hits of a web form
 * @param FormID as integer
 */

function crmFormHit( formID ) {

	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
	
	  stmt = con.prepareStatement("update web_Contact_Forms set hits = hits + 1 where form_id = ?");  
		stmt.setString(1, formID);
		stmt.execute();
	}
	catch (e) {
		log("__**ERROR** - crmFormHit - " + e);
		crmLog(0, "Update", "Error updating form hits (" + formID + ") - " + e, 1);
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();	
	}
}

/*********************************************************************************************************************************/
/**
 * Checks for a users permisison to perform an action 
 * @param {integer} CategoryID 
 * @param {string} Action 
 * @return {boolean} 
 */
 
function crmCheckPermission(CategoryID, Action, Custom) {

	var outcome = false;

	if (system.securityManager.getUserName() == 'georgee') {
		return true;
	}

	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;

		var TeamID = system.securityManager.getCredential("Team_ID");
		//log ("TeamID = " + TeamID);
		//log ("CategoryID = " + CategoryID);
		//log ("Action = " + Action);
	
		stmt = con.prepareCall("? = dbo.CheckAccess(?,?,?)"); //Execute stored procedure
		stmt.registerOutParameter(1, java.sql.Types.BIT);
		
		stmt.setString(2, TeamID);
		stmt.setInt(3, CategoryID);
		stmt.setString(4, Action);
		
		stmt.execute();

		outcome = stmt.getBoolean(1);
		
	}
	catch (e) {
		log("__**ERROR** - crmCheckPermission - " + e);
		crmLog(0, "SECURITY", "Error checking the users permisison - " + e, 1);
		outcome = false;
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
	
	log("Outcome = " + outcome);

	if (outcome == false) {
		crmLog(0, "SECURITY", "Permission DENIED Team:" + TeamID + " Category:" + CategoryID + " EnquiryID: " + Custom + " Action:" + Action, 3);

		var msg = 'Sorry but you do not have sufficient privileges to perform this action.';
		
		//Send user to the error page
		var params = {};
		params.err_Title = "Access Denied";
		params.err_Message = msg;
		params.err_Category = CategoryID;
		params.err_Action = Action;
		form.callForm('LoginError', params);
		
	}
	else {
		crmLog(0, "SECURITY", "Permission GRANTED Team:" + TeamID + " Category:" + CategoryID + " EnquiryID: " + Custom + " Action:" + Action, 3);
	}
	
	return outcome;
}

///******************************************************************************/
//
///* Not used! */
//
///**
// * Checks to see customer has portal login
// * @param Customer_ID string
// * @return Login_ID integer
// */
// 
//function crmGetCustomerPortal( CustomerID ) {
// 		
//	var con = system.getDatabaseConnection(strCon);
//	var stmt;
//	var rs;
//
//	var result = 0;
//
//	try {
//  	stmt = con.prepareStatement("select login_id from ptl_Logins where customer_id = " + CustomerID);
//  	rs = stmt.executeQuery();
//
//  	while (rs.next()){
//				result = rs.getInt("Login_id");
//			}	
//		crmLog(0,"Query", "Customer portal account? - " + result, 3);
//	}
//	catch (e) {
//		log("__**ERROR** - crmCheckCustomerPortal - " + e);
//		crmLog(0, "Query", "Error querying customer Portal (Customer ID = " + CustomerID + " - " + e, 1);
//	}
//	
//	finally	{
//	  if(rs) rs.close();
//	  if(stmt) stmt.close();
//	  if(con) con.close();
//	}			
//	  return result;
//}

/******************************************************************************/

/**
 * Checks to see if login already exists in the CRM DB
 * @param username string
 * @return Login_ID as integer
 */
 
function crmCheckLogin(username) {
 		
	var result = 0;

	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
	
  	stmt = con.prepareStatement("select max(Customer_ID) as Customer_ID from ptl_logins where username = ?");
  	stmt.setString(1, username);
  	rs = stmt.executeQuery();

  	while (rs.next()){
				result = rs.getInt("Customer_ID");
			}	

	}
	catch (e) {
		log("__**ERROR** - crmCheckLogin - " + e);
		crmLog(0, "Query", "Error querying login (" + username + " - " + e, 1);
	}
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}			
	  return result;
}

/*********************************************************************************************************************************/

/**
 * Updates an enquiry priority
 * @param {integer} Enquiry ID 
 * @param {integer} Priority (1=Low, 2=Medium, 3=High) 
 */

function crmUpdateEnquiryPriority(enquiryID,Priority) {
		
	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
	
		stmt = con.prepareStatement("update crm_Enquiries set priority=? where enquiry_id=?");
		stmt.setString(1,Priority);
		stmt.setInt(2,enquiryID);
		stmt.execute();
	}
	catch (e) {
		log("__**ERROR** - crmUpdateEnquiryPriority - " + e);
		crmLog(0, "Query", "Error updating enquiry priority for " + enquiryID + " - " + e, 1);
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
}

/******************************************************************************/

/**
 * Checks to see if an email address is already in use
 * @param {string} EmailAddress 
 * @return CustomerID as integer
 */
 
function crmCheckEmail(emailAddress) {
	
	var result = 0;
	
	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
	
  	stmt = con.prepareStatement("select max(ID) as ID from CRM_Customers where lower(email) = lower(?)");
  	stmt.setString(1, emailAddress);
  	rs = stmt.executeQuery();

  	while (rs.next()){
				result = rs.getInt("ID");
			}
			
		//crmLog(0,"Query", "Email address in use? - " + result, 3);
	}
	catch (e) {
		log("__**ERROR** - crmCheckEmail - " + e);
		crmLog(0, "Query", "Error querying email " + emailAddress + " - " + e, 1);
	}	
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}			
	  return result;
}

///*********************************************************************************************************************************/
//
///**
// * Updates a customers login
// * @param {integer} CustomerID 
// * @param {string} Username 
// */
//
//function crmUpdateUsername (CustomerID,Username) {
//
//	//Check to see if the new username is different to the exisiting
//	var oldUsername = '';
//	var cust = new Object();
//		cust.Firstname = '';
//		cust.Surname = '';
//		cust.Email = '';
//		cust.Title = '';
//		cust.otherTitle = '';
//
//	try {
//		var con = system.getDatabaseConnection(strCon);
//		var stmt;
//		var rs;
//	
//  	stmt = con.prepareStatement("select username from ptl_Logins where customer_ID = ?");
//  	stmt.setInt(1, CustomerID);
//  	rs = stmt.executeQuery();
//
//  	while (rs.next()){
//				oldUsername = rs.getString("username");
//			}
//	}
//	catch(e) {
//		log("__**ERROR** - crmUpdateUsername - Checking existing username - " + e);
//		crmLog(0, "Query", "Error updating username for customer ID " + CustomerID + " (Check exisiting username) - " + e, 1);
//	}
//	finally {
//		if(stmt) stmt.close();
//		if(con) con.close();
//		if (rs) rs.close();
//	}
//	
//	crmLog(0, "DEBUG", "Current Username = " + oldUsername, 1);
//	crmLog(0, "DEBUG", "New Username = " + Username, 1);
//
//	if (oldUsername != Username) {
//		// If the new username is different then update and send confirmation email
//		log ("Updating username for customer id " + CustomerID);
//		crmLog(0, "Update", "Updating username to  " + Username + " from " + oldUsername + " for customer id " + CustomerID, 1);
//
//		try {
//			var con = system.getDatabaseConnection(strCon);
//			//Update login
//			stmt = con.prepareStatement("update ptl_Logins set username = ? where Customer_ID = ?");  
//			stmt.setString(1, Username);
//			stmt.setInt(2, CustomerID);
//			stmt.execute();
//			//Update roles
//			stmt = con.prepareStatement("update ptl_Roles set username = ? where username = ?");
//			stmt.setString(1, Username);
//			stmt.setString(2, oldUsername);
//			stmt.execute();
//			//Update preferences
//			stmt = con.prepareStatement("update ptl_Preferences set username = ? where username = ?");
//			stmt.setString(1, Username);
//			stmt.setString(2, oldUsername);
//			stmt.execute();
//		}
//		catch (e) {
//			log("__**ERROR** - crmUpdateUsername - " + e);
//			crmLog(0, "Query", "Error updating username for customer ID " + CustomerID + " - " + e, 1);
//		}
//		finally {
//		  if(stmt) stmt.close();
//		  if(con) con.close();
//		}
//
//		
//		
//		//Send a confirmation email to the customer confirming username change
//		try {
//			var con = system.getDatabaseConnection(strCon);
//			//Get customer details
//			stmt = con.prepareStatement("select title, other_title, firstname, surname, Email from CRM_Customers where id = ?");
//		  stmt.setInt(1, CustomerID);
//		  rs = stmt.executeQuery();
//		
//		  while (rs.next()){
//		  	cust.Firstname = rs.getString("firstname");
//				cust.Surname = rs.getString("surname");
//				cust.Email = rs.getString("email");
//				cust.Title = rs.getString("title");
//				cust.otherTitle = rs.getString("other_title");
//			}
//
//			//Build email
//			var Title = crmGetTitle(cust.Title, cust.otherTitle, cust.Firstname)	
//			var Recipient = cust.Email;
//			var Subject = '';
//			var Body = '';
//		
//			if (system.variables.$LANGUAGE.value == 'CY') {
//				Subject = 'Defnyddiwr wedi newid';
//		
//				if (TestServer) {subject += ' ( ! TEST ! )';}
//				
//				Body = 'Annwyl ' + Title + ' ' + cust.Surname + ',&lt;br /&gt;&lt;br /&gt;';
//				Body += 'Mae eich defnyddiwr wedi newid. Bydd rhaid i chi mewn gofnodi o hyn ymlaen gyda\'r defnyddiwr isod&lt;br /&gt;&lt;br /&gt;';
//				Body += '&lt;strong&gt;Defnyddiwr Newydd: ' + Username + '&lt;/strong&gt;';
//						
//				Body += '&lt;br /&gt;&lt;br /&gt;Cyngor Sir &lt;strong&gt;CEREDIGION&lt;/strong&gt; County Council&lt;br/&gt;Neuadd Cyngor Ceredigion Penmorfa&lt;br/&gt;Aberaeron&lt;br/&gt;Ceredigion&lt;br/&gt;SA46 0PA&lt;br/&gt;01545 570881';
//				Body += '&lt;br/&gt;&lt;a href="http://www.ceredigion.gov.uk"&gt;www.ceredigion.gov.uk&lt;/a&gt;';
//				
//			}
//			else {
//			
//				Subject = 'Change of username confirmation';
//		
//				if (TestServer) {subject += ' ( ! TEST ! )';}
//				
//				Body = 'Dear ' + Title + ' ' + cust.Surname + ',&lt;br /&gt;&lt;br /&gt;';
//				Body += 'This email is to notify you that your username has changed. Please use this username when signing-in.&lt;br /&gt;&lt;br /&gt;';
//				Body += '&lt;strong&gt;New Username: ' + Username + '&lt;/strong&gt;';
//				
//				Body += '&lt;br /&gt;&lt;br /&gt;Kind regards&lt;br /&gt;&lt;br/&gt;&lt;strong&gt;The Customer Services Team&lt;/strong&gt;';
//					
//				Body += '&lt;br /&gt;&lt;br /&gt;Cyngor Sir &lt;strong&gt;CEREDIGION&lt;/strong&gt; County Council&lt;br/&gt;Neuadd Cyngor Ceredigion Penmorfa&lt;br/&gt;Aberaeron&lt;br/&gt;Ceredigion&lt;br/&gt;SA46 0PA&lt;br/&gt;01545 570881';
//				Body += '&lt;br/&gt;&lt;a href="http://www.ceredigion.gov.uk"&gt;www.ceredigion.gov.uk&lt;/a&gt;';
//			}
//
//			//sendEmail
//			cccSendEmail(Recipient, Subject, Body);
//		}
//		catch (e) {
//			log("__**ERROR** - crmUpdateUsername - Problem sending the confirmation email" + e);
//			crmLog(0, "Query", "Error sending username change confirmation email for customer ID " + CustomerID + " - " + e, 1);
//		}
//		finally {
//			if(stmt) stmt.close();
//		  if(con) con.close();
//		  if (rs) rs.close();
//		}
//		
//	}
//	else {
//		//Username is the same as the exisiting one
//		crmLog(0, "Query", "New username and the exisiting are the same, no update needed. (" + CustomerID + ")", 1);
//	}
//	
//}

///*******************************************  OLD  ***********************************************************************/
//
///**
// * Sends a verification email to a specified email address
// * @param {integer} CustomerID 
//*/
//
//function crmVerifyEmail(CustomerID) {
//	
//	// 1. Get the customer details
//	if (CustomerID == null || CustomerID == 'undefined') {
//		event.owner.addErrorMessage("There was an error trying to send the verification email.");
//	}
//	else {
//		//Create a customer object to store the details from the DB
//		var cust = new Object();
//		cust.Firstname = '';
//		cust.Surname = '';
//		cust.Email = '';
//		cust.Title = '';
//		cust.otherTitle = '';
//			
//		var result = 0;
//	
//		try {
//	  	var con = system.getDatabaseConnection(strCon);
//			var stmt;
//			var rs;
//		
//	  	stmt = con.prepareStatement("select title, other_title, firstname, surname, Email from CRM_Customers where id = ?");
//	  	stmt.setString(1, CustomerID);
//	  	rs = stmt.executeQuery();
//	
//	  	while (rs.next()){
//	  		cust.Firstname = rs.getString("firstname");
//				cust.Surname = rs.getString("surname");
//				cust.Email = rs.getString("email");
//				cust.Title = rs.getString("title");
//				cust.otherTitle = rs.getString("other_title");
//			}
//		}
//		catch (e) {
//			log("__**ERROR** - crmVerifyEmail - Error getting customer details from database - " + e);
//			crmLog(0, "Query", "crmVerifyEmail - Error getting customer details from database - " + e, 1);
//		}	
//		finally	{
//		  if(rs) rs.close();
//		  if(stmt) stmt.close();
//		  if(con) con.close();
//		}
//
//		//Reset customer verification level
//		try {
//
//			var con = system.getDatabaseConnection(strCon);
//			var stmt;
//			var rs;
//			
//	  	stmt = con.prepareStatement("update CRM_Customers set verification_level = 0 where id = ?");
//	  	stmt.setString(1, CustomerID);
//	  	stmt.execute();
//	
//		}
//		catch (e) {
//			log("__**ERROR** - crmVerifyEmail - Error updating customer verification level - " + e);
//			crmLog(0, "Query", "crmVerifyEmail - Error updating customer verification level - " + e, 1);
//		}	
//		finally	{
//		  if(stmt) stmt.close();
//		  if(con) con.close();
//		}
//	}
//	
//	if (!cust.Email == null || !cust.Email == '') {
//		// 2. Send verification email to the customer
//	
//		var Salutation = crmGetSalutation(cust.Title, cust.otherTitle, cust.Firstname, cust.Surname)
//	
//		//Send an email to the customer with a link to verify their address
//		
//		crmLog(0, "DEBUG", "CUST_EMAIL = " + cust.Email, 1);
//	
//		var Recipient = cust.Email;
//		var Subject = '';
//		var Body = '';
//
//		//Generate a random token
//		var token = generateToken(32);
//		log("TOKEN = " + token);
//
//		//Write the token value to the database
//		crmUpdateSecurityToken(CustomerID,token); 
//		
//		if (system.variables.$LANGUAGE.value == 'CY') {
//		
//			Subject = 'Cadarnhau’ch cyfeiriad e-bost';
//	
//			if (TestServer) {Subject += ' ( ! TEST ! )';}
//			
//			Body = 'Annwyl ' + Salutation + ',&lt;br /&gt;&lt;br /&gt;';
//			Body += 'Cliciwch ar y ddolen gyswllt isod i gadarnhau’ch cyfeiriad e-bost.&lt;br /&gt;&lt;br /&gt;';
//			Body += '&lt;a href="' + svrPath + 'VERIFY.eb?pid=' + EncryptionServices.encrypt(CustomerID) + '&amp;token=' + token;
//			Body += '&amp;LANGUAGE=CY"&gt;Cadarnhau cyfeiriad e-bost&lt;/a&gt;';
//					
//			Body += '&lt;br /&gt;&lt;br /&gt;Cyngor Sir &lt;strong&gt;CEREDIGION&lt;/strong&gt; County Council&lt;br/&gt;Neuadd Cyngor Ceredigion Penmorfa&lt;br/&gt;Aberaeron&lt;br/&gt;Ceredigion&lt;br/&gt;SA46 0PA&lt;br/&gt;01545 570881';
//			Body += '&lt;br/&gt;&lt;a href="http://www.ceredigion.gov.uk"&gt;www.ceredigion.gov.uk&lt;/a&gt;';
//			
//		}
//		else {
//		
//			Subject = 'Please verify your email address';
//	
//			if (TestServer) {Subject += ' ( ! TEST ! )';}
//			
//			Body = 'Dear ' + Salutation + ',&lt;br /&gt;&lt;br /&gt;';
//			Body += 'Please click the link below to verify your email address.&lt;br /&gt;&lt;br /&gt;';
//			Body += '&lt;a href="' + svrPath + 'VERIFY.eb?pid=' + EncryptionServices.encrypt(CustomerID) + '&amp;token=' + token;
//			Body += '"&gt;Verify email address&lt;/a&gt;';
//			Body += '&lt;br /&gt;&lt;br /&gt;Kind regards&lt;br /&gt;&lt;br/&gt;&lt;strong&gt;The Customer Services Team&lt;/strong&gt;';
//				
//			Body += '&lt;br /&gt;&lt;br /&gt;Cyngor Sir &lt;strong&gt;CEREDIGION&lt;/strong&gt; County Council&lt;br/&gt;Neuadd Cyngor Ceredigion Penmorfa&lt;br/&gt;Aberaeron&lt;br/&gt;Ceredigion&lt;br/&gt;SA46 0PA&lt;br/&gt;01545 570881';
//			Body += '&lt;br/&gt;&lt;a href="http://www.ceredigion.gov.uk"&gt;www.ceredigion.gov.uk&lt;/a&gt;';
//		}
//				
//		cccSendEmail(Recipient, Subject, Body);
//		
//		crmLog(0,"Email", "Verification email sent to " + Recipient, 3);
//	}
//	else {
//		event.owner.addErrorMessage("Unable to send verification email - There was a problem with the email address");
//	}
//
//}

/*****************************************************************************************
/**
 * Calcualtes what should be displayed as the dear .... text using title and forename
 * @param {String} Title
 * @param {string} OtherTitle 
 * @param {string} Firstname 
 * @returns {String}
 */

function crmGetSalutation (Title, OtherTitle, Firstname, Surname) {

	if (Firstname == null &amp;&amp; Surname == null) {
		return texts.text101.getText();
	}
	//If other title selecteded, return the other title text
	if (Title == 'Other') {
		return OtherTitle + ' ' + Surname;
	}

	//If no title supplied use firstname
	if (Title == null || Title == 'null' || Title == '') {
		return Firstname;
	}

	if (Title != null) {
		return Title + ' ' + Surname
	}
	
}

/*********************************************************************************************************************************/

/**
 * Updates the security token on a login
 * @param {integer} CustomerID 
 */

function crmUpdateSecurityToken (CustomerID, Token) {
	
	if (CustomerID &gt; 0) {

		try {
			//Update login
			var con = system.getDatabaseConnection(strCon);
			var stmt;
			
			stmt = con.prepareStatement("update ptl_Logins set token = ? where Customer_ID = ?");
			stmt.setString(1, Token);
			stmt.setInt(2, CustomerID); 
			stmt.execute();
		}
		catch (e) {
			log("__**ERROR** - crmUpdateSecurityToken - " + e);
			crmLog(0, "Query", "Error updating user token " + CustomerID + " - " + e, 1);
		}
		finally {
		  if(stmt) stmt.close();
		  if(con) con.close();
		}
	}
	
}

/*********************************************************************************************************************************/

/**
 * Sets an authentication PIN for a customer
 * @param {Character} Type Purpose of the PIN e.g. EMAIL authentication or MOBILE authentication
 * @param {integer} CustomerID
 * @returns {integer} PIN
 */

function crmSetSecurityPIN (Type,CustomerID) {
	
	//Generate 6 digit PIN
	var PIN = crmGeneratePIN();
	//var Expiry = 24; //Hours
		
	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
		
		stmt = con.prepareCall("? = dbo.SetSecurityPIN(?,?)"); //Execute stored procedure
		stmt.registerOutParameter(1, java.sql.Types.INTEGER);
		
		stmt.setString(2, Type);
		stmt.setInt(3, CustomerID);

		stmt.execute();

		PIN = stmt.getInt(1);
	}
	catch (e) {
		log("__**ERROR** - crmSetSecurityPIN - " + e);
		crmLog(0, "Query", "Error updating customer PIN " + CustomerID + " - " + e, 1);
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();
	}

	return PIN;
	
}

/************************************************************************************************
 * Checks an authentication PIN to see if it is valid
 * @param {Character} Type Purpose of the PIN e.g. EMAIL authentication or MOBILE authentication
 * @param {integer} CustomerID
 * @returns {integer} PIN
 */

function crmCheckSecurityPIN (Type,CustomerID,PIN) {
	var result = 0;
	
	try {

		var con = system.getDatabaseConnection(strCon);
		var stmt;

		stmt = con.prepareCall("? = dbo.CheckSecurityPIN(?,?,?)"); //Execute stored procedure
		stmt.registerOutParameter(1, java.sql.Types.INTEGER);
		
		stmt.setString(2, Type);
		stmt.setInt(3, CustomerID);
		stmt.setInt(4, PIN);
		
		stmt.execute();

		result = stmt.getInt(1);
	}
	catch (e) {
		log("__**ERROR** - crmCheckSecurityPIN - " + e);
		crmLog(0, "Query", "Error checking customer PIN " + CustomerID + " - " + e, 1);
	}
	finally {
	  if(stmt) stmt.close();
	  if(con) con.close();
	}
	
	return result;
	
}

/*********************************************************************************
 * Creates a random 6 digit PIN
 * @return {Integer} PIN
 */
 
function crmGeneratePIN() {
   
    var length = 6
   
    var charset = "0123456789";
    var PIN = "";
    
    for (var i = 0, n = charset.length; i &lt; length; ++i) {
        PIN += charset.charAt(Math.floor(Math.random() * n));
    }
    
    return parseInt(PIN)
}

/******************************************************************************/

/**
 * Gets the additional Team info
 * @param {string} TeamID 
 * @return {object} TeamInfo
 */
 
function crmGetTeamInfo(TeamID) {
	
	TeamInfo = {};
	TeamInfo.Email = '';
	TeamInfo.Leader = '';

	log("Getting team info for team " + TeamID);

	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
	
  	stmt = con.prepareStatement("select top 1 Email, Leader, Team_Name from sys_Security_Team_View where Team_ID = ?");
  	stmt.setString(1, TeamID);
  	rs = stmt.executeQuery();

  	while (rs.next()){
			TeamInfo.Email = rs.getString("Email");
			TeamInfo.Leader = rs.getString("Leader");
			TeamInfo.Name = rs.getString("Team_Name");
		}

	}
	catch (e) {
		log("__**ERROR** - crmGetTeamInfo - " + e);
		crmLog(0, "Query", "Error getting additional team info (" + TeamID + ") - " + e, 1);
	}	
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}			
	  return TeamInfo;
}

/******************************************************************************/

/**
 * Gets the additional Category info
 * @param {Integer} SubCategoryID 
 * @return {object} CategoryInfo
 */
 
function crmGetCategoryInfo(CategoryID) {
	
	CategoryInfo = {};
	CategoryInfo.Name = '';

	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
  	
  	stmt = con.prepareStatement("select Category from crm_categories where Category_ID = ?");
  	stmt.setInt(1, CategoryID);
  	rs = stmt.executeQuery();

  	while (rs.next()){
			CategoryInfo.Name = rs.getString("Category");
		}
	}
	catch (e) {
		log("__**ERROR** - crmGetCategoryInfo - " + e);
		crmLog(0, "Query", "Error getting additional category info (" + CategoryID + ") - " + e, 1);
	}	
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}			
	  return CategoryInfo;
}

/******************************************************************************/

/**
 * Check to see if customer login is enabled
 * @return {boolean}
 */
 
function crmLoginEnabled() {

	var result = false;
	
	try {

		var con = system.getDatabaseConnection('CRM');
		var stmt;
		var rs;
	
  	stmt = con.prepareStatement("select Enable_Customer_Login from sys_Settings");
  	rs = stmt.executeQuery();

  	while (rs.next()){
			result = rs.getBoolean(1);
		}

	}
	catch (e) {
		log("__**ERROR** - customerLoginEnabled - " + e);
		return false;
	}
	finally {
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}

	return result;
}

/*********************************************************************************************************************************/

/**
 * Return the ID of a given enquiry status
 * @param StatusName string
 * @return StatusID integer
 */

function crmGetStatusID(StatusName) {

	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;
		var rs;
	
		stmt = con.prepareStatement("select status_id from CRM_Enquiry_Status_List where Description = ?");
		stmt.setString(1, StatusName);
		rs = stmt.executeQuery();
	
		while (rs.next()){
				var ID = rs.getInt("status_id");			
			}
	  }
	catch (e) {
		log("__**ERROR** - crmGetStatusID " + e);
		crmLog(0, "Query", "Error getting status ID for " + StatusName + " - " + e, 1);
	
		result = 0;	
	}
	finally	{
			try {
		  	if(stmt) stmt.close();
		  	if(con) con.close();
		  	if(rs) rs.close();
			}
			catch(e) {
				log("## CRM ## - **ERROR** - Unable to close database connection,recordset or statement");
			}
	}
		 return ID;
}

/*********************************************************************************************************************************/

/**
 * Sets an enquiry as complete
 * @param EnquiryID as integer
 */

function crmCompleteEnquiry(EnquiryID) {
	
	try {
		var con = system.getDatabaseConnection(strCon);
		var stmt;

	  stmt = con.prepareStatement("update CRM_Enquiries set [Complete] = 1 where enquiry_ID = ?");
	  stmt.setInt(1,EnquiryID );
		stmt.execute();
	}
	catch (e) {
		log("__**ERROR** - crmCompleteEnquiry - " + e);
		crmLog(0, "Update", "Error completing enquiry ID " + EnquiryID + " - " + e, 1);
	}
	finally	{
	  if(stmt) stmt.close();
	  if(con) con.close();	
	}
}

/******************************************************************************/

/**
 * Gets the next collections dates for a given address using the UPRN as an identifier
 * @param UPRN string
 * @return Collections as object
 */
 
function getRefuseDates(UPRN) {

	log("Getting bin collections for UPRN " + UPRN);
 		
	var collections = [];
	var found = false;

	try {

		var con = system.getDatabaseConnection('CRM');
		var stmt;
		var rs;
		//Get the next two dates from the database
  	stmt = con.prepareStatement("select convert(smalldatetime,strDate1) as strDate1, convert(smalldatetime,strDate2) as strDate2 ,Date1Type, Date2Type from web_RefuseCollectionDates where UPRN = ?");
  	stmt.setInt(1, UPRN);
  	rs = stmt.executeQuery();

  	while (rs.next()){

  		//Store the dates as moment and type as string into an array
  		//log("Date 1 = " + rs.getString("strDate1") + " Type=" + rs.getString("Date1Type"));
  		var collection1 = [moment(rs.getString("strDate1")),rs.getString("Date1Type")];
  		collections.push(collection1);
  		
  		//log("Date 2 = " + rs.getString("strDate2") + " Type=" + rs.getString("Date2Type"));
  		var collection2 = [moment(rs.getString("strDate2")),rs.getString("Date2Type")];
  		collections.push(collection2);
			found = true;
		}	
			
		//See if either one of the dates is a bank holiday
		if (checkBankHoliday(collections[0][0])) {
			//Move both dates on a week - Using moment.js functions
			collections[0][0] = collections[0][0].add(1,'w');
			collections[1][0] = collections[1][0].add(1,'w');
		}

		if (checkBankHoliday(collections[1][0])) {
 			//Only move the second date on a week
 			collections[1][0] = collections[1][0].add(1,'w');
 		}
 		
	}
	catch (e) {
		log("__**ERROR** - getRefuseDates - " + e);
		crmLog(0, "Query", "Error getting refuse dates (UPRN = " + UPRN + ") " + e, 1);
	}
	
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}

	if (found == true) {
		return collections;
	}
	else {
		return "Error";
	}
	
}

/******************************************************************************/

/**
 * Gets the next bulky waste collections dates for a given address using the UPRN as an identifier
 * @param UPRN string
 * @return Collections as object
 */
 
function getBulkyDates(UPRN) { 		

	var collections = [];
	var found = false;

	try {

		var con = system.getDatabaseConnection('CRM');
		var stmt;
		var rs;
		//Get the next two dates from the database
  	stmt = con.prepareStatement("select Pickup1, Pickup2 from web_BulkyCollectionDates where UPRN = ?");
  	stmt.setString(1, UPRN);
  	rs = stmt.executeQuery();

  	while (rs.next()){
  		//Store the dates as moment and type as string into an array
  		log("Date 1 = " + rs.getString("Pickup1"));
  		collections[0] = moment(rs.getString("Pickup1"));
  		
  		log("Date 2 = " + rs.getString("Pickup2"));
  		collections[1] = moment(rs.getString("Pickup2"));
			found = true;
		}

		
			
//		//See if either one of the dates is a bank holiday
//		if (checkBankHoliday(collections[0][0])) {
//			//Move both dates on a week - Using moment.js functions
//			collections[0][0] = collections[0][0].add(1,'w');
//			collections[1][0] = collections[1][0].add(1,'w');
//		}
//
//		if (checkBankHoliday(collections[1][0])) {
// 			//Only move the second date on a week
// 			collections[1][0] = collections[1][0].add(1,'w');
// 		}

	}
	catch (e) {
		log("__**ERROR** - getBulkyDates - " + e);
		crmLog(0, "Query", "Error getting bulky dates (UPRN = " + UPRN + ") " + e, 1);
	}
	
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}

	if (found == true) {
		return collections;
	}
	else {
		return "Error";
	}
	
}

/******************************************************************************/

/**
 * Gets the next bulky waste collections dates for a given address using the UPRN as an identifier
 * @param UPRN string
 * @return Collections as object
 */
 
function getGreenDates(UPRN) {
 		
	var collections = [];
	var found = false;

	try {

		var con = system.getDatabaseConnection('CRM');
		var stmt;
		var rs;
		//Get the next two dates from the database
  	stmt = con.prepareStatement("select Pickup1, Pickup2 from web_GreenCollectionDates where UPRN = ?");
  	stmt.setString(1, UPRN);
  	rs = stmt.executeQuery();

  	while (rs.next()){
  		//Store the dates as moment and type as string into an array
  		log("Date 1 = " + rs.getString("Pickup1"));
  		collections[0] = moment(rs.getString("Pickup1"));
  		
  		log("Date 2 = " + rs.getString("Pickup2"));
  		collections[1] = moment(rs.getString("Pickup2"));
			found = true;
		}

	}
	catch (e) {
		log("__**ERROR** - getGreenDates - " + e);
		crmLog(0, "Query", "Error getting green dates (UPRN = " + UPRN + ") " + e, 1);
	}
	
	finally	{
	  if(rs) rs.close();
	  if(stmt) stmt.close();
	  if(con) con.close();
	}

	if (found == true) {
		return collections;
	}
	else {
		return "Error";
	}
	
}
</scriptText>
    </script>
</ebase>
